{"version":3,"sources":["components/card/card-component.js","components/card-list/card-list.js","components/input/input-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monsterList","id","alt","name","email","cardList","map","class","type","placeholder","onChange","App","state","searchField","fetch","then","response","json","data","setState","this","filterList","filter","toLowerCase","includes","e","target","value","console","log","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAQeA,EAPF,SAACC,GAAD,OACT,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,YAAYC,GAA5C,0BAAwEC,IAAI,UACpF,mCAAML,EAAMG,YAAYG,KAAxB,OACA,4BAAIN,EAAMG,YAAYI,YCGfC,EALE,SAACR,GACd,OAAO,qBAAKC,UAAU,YAAf,SAA4BD,EAAMG,YAAYM,KAAI,SAAAN,GAAW,OAChE,cAAC,EAAD,CAA6BA,YAAeA,GAA/BA,EAAYC,UCFlB,G,MAAA,SAACJ,GACZ,OACI,qBAAKU,MAAM,SAAX,SACI,uBAAOC,KAAK,SACZC,YAAaZ,EAAMY,YACnBC,SAAYb,EAAMa,eCgCfC,E,kDApCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXZ,YAAc,GACda,YAAc,IAJL,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAC1BnB,YAAckB,S,oBAIlB,WAAS,IAAD,SAE+BE,KAAKR,MAAlCZ,EAFF,EAEEA,YAAaa,EAFf,EAEeA,YACfQ,EAAarB,EAAYsB,QAAO,SAAAtB,GACpC,OAAOA,EAAYG,KAAKoB,cAAcC,SAASX,EAAYU,kBAE7D,OACE,gCAEE,cAAC,EAAD,CACAd,YAAY,eACZC,SAAY,SAAAe,GAAK,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WAEvD,cAAC,EAAD,CAAU3B,YAAeqB,IACxBO,QAAQC,IAAIR,U,GA9BHS,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f8ae6997.chunk.js","sourcesContent":["import \"./card.styles.css\"\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monsterList.id}?set=set2&size=180x180`} alt=\"image\"></img>\r\n        <h2> {props.monsterList.name} </h2>\r\n        <p>{props.monsterList.email}</p>\r\n    </div>\r\n)\r\nexport default Card","import \"./card-list.styles.css\"\r\nimport Card from \"../card/card-component\"\r\n\r\nconst cardList = (props) =>{\r\n    return <div className=\"card-list\">{props.monsterList.map(monsterList => (\r\n        <Card key = {monsterList.id} monsterList = {monsterList} />\r\n      ))}</div>\r\n}\r\nexport default cardList","import React from 'react'\r\nimport \"./search-box.styles.css\"\r\n\r\nexport default (props)=>{\r\n    return(\r\n        <div class=\"search\">\r\n            <input type=\"search\" \r\n            placeholder={props.placeholder} \r\n            onChange = {props.onChange}>\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\nimport CardList from \"./components/card-list/card-list.js\"\nimport Input from \"./components/input/input-box.js\"\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      monsterList : [],\n      searchField : \"\"\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => this.setState({\n      monsterList : data\n    }))\n  }\n\n  render(){\n\n    const { monsterList, searchField } = this.state\n    const filterList = monsterList.filter(monsterList =>{ \n      return monsterList.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    return(\n      <div>\n        \n        <Input\n        placeholder=\"Search Robos\"\n        onChange = {e =>{this.setState({searchField : e.target.value})}}/>\n        \n        <CardList monsterList = {filterList} />\n        {console.log(filterList)}\n        \n      </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}